{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from threading import Thread\n",
    "import time\n",
    "\n",
    "sniff_flag = False\n",
    "\n",
    "def packet_sniffer():\n",
    "    global sniff_flag\n",
    "    print (\"packet_sniffer started\")\n",
    "    while True:\n",
    "        # sniffing in progress\n",
    "        # sniffing until sniff_flag becomes true\n",
    "        print(\"Sniffing\")\n",
    "        time.sleep(0.4)\n",
    "        #print(sniff_flag)\n",
    "        if sniff_flag:\n",
    "            print (\"Sniffing complete\")\n",
    "            break\n",
    "    return 0\n",
    "\n",
    "def downloader():\n",
    "    global sniff_flag\n",
    "    print (\"Downloading started\")\n",
    "    # downloading in progress\n",
    "    time.sleep(2)\n",
    "    sniff_flag = True\n",
    "    #time.sleep(2)\n",
    "    #check = False\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    #var=str(input())\n",
    "    t1=Thread(target = packet_sniffer)\n",
    "    t2=Thread(target = downloader)\n",
    "    t2.start()\n",
    "    t1.start()\n",
    "    t2.join()\n",
    "    t1.join()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from threading import Thread\n",
    "import time\n",
    "\n",
    "check = False\n",
    "\n",
    "def func1():\n",
    "    print (\"funn1 started\")\n",
    "    Thread(target = func2).start()\n",
    "    while True:\n",
    "        if check:\n",
    "            print (\"got permission\")\n",
    "            break\n",
    "    while True:\n",
    "        if (not check):\n",
    "            print(\"got2\")\n",
    "            break\n",
    "\n",
    "def func2():\n",
    "    global check\n",
    "    print (\"func2 started\")\n",
    "    time.sleep(2)\n",
    "    check = True\n",
    "    time.sleep(5)\n",
    "    check = False\n",
    "    \n",
    "\n",
    "if __name__ == '__main__':\n",
    "    Thread(target = func1).start()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from threading import Thread\n",
    "import time\n",
    "\n",
    "check = False\n",
    "\n",
    "def func1():\n",
    "    print (\"funn1 started\")\n",
    "    Thread(target = func2).start()\n",
    "    for i in range(3):\n",
    "        print(\"inside func 1\")\n",
    "        time.sleep(0.5)\n",
    "    return 0\n",
    "\n",
    "def func2():\n",
    "    for i in range(3):\n",
    "        print(\"inside func 2\")\n",
    "        time.sleep(3)\n",
    "    \n",
    "\n",
    "if __name__ == '__main__':\n",
    "    Thread(target = func1).start()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64\n",
      "downloader started\n",
      "sniffing\n",
      "sniffing\n",
      "sniffing\n",
      "sniffing\n",
      "sniffing\n",
      "download complete \n",
      "\n",
      "sniffing complete \n",
      "\n",
      "output value\n"
     ]
    }
   ],
   "source": [
    "from threading import Thread\n",
    "import time\n",
    "\n",
    "check = True\n",
    "var=0\n",
    "\n",
    "def downloader(vid_link):\n",
    "    global check\n",
    "    global t2\n",
    "    print (\"downloader started\")\n",
    "    t2.start()\n",
    "    for i in range(5):  #representing download time\n",
    "        time.sleep(1)\n",
    "    check=False\n",
    "    print(\"download complete \\n\")\n",
    "    t2.join()\n",
    "    \n",
    "\n",
    "def sniffer():\n",
    "    global check\n",
    "    global var\n",
    "    while check:\n",
    "        print(\"sniffing\")\n",
    "        time.sleep(1)\n",
    "    print(\"sniffing complete \\n\")\n",
    "    var = \"output value\"\n",
    "        \n",
    "\n",
    "if __name__ == '__main__':\n",
    "    vid_link=str(input())\n",
    "    t1=Thread(target = downloader, args=(vid_link, ))\n",
    "    t2=Thread(target = sniffer)\n",
    "    t1.start()\n",
    "    t1.join()\n",
    "    print(var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Video link\n",
      "xvvdf\n",
      "downloader started \n",
      "sniffing\n",
      "\n",
      "sniffing\n",
      "sniffing\n",
      "sniffing\n",
      "sniffing\n",
      "\n",
      "download complete \n",
      "sniffing complete \n",
      "\n",
      "output value\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from threading import Thread\n",
    "import time\n",
    "\n",
    "check = True\n",
    "var=0\n",
    "\n",
    "def downloader(vid_link):\n",
    "    global check\n",
    "    print (\"downloader started \\n\")\n",
    "    for i in range(5):  #representing download time\n",
    "        time.sleep(1)\n",
    "    check=False\n",
    "    print(\"\\ndownload complete \\n\")\n",
    "    \n",
    "\n",
    "def sniffer():\n",
    "    global check\n",
    "    global var\n",
    "    while check:\n",
    "        print(\"sniffing\")\n",
    "        time.sleep(1)\n",
    "    print(\"sniffing complete \\n\")\n",
    "    var = \"output value\"\n",
    "        \n",
    "\n",
    "if __name__ == '__main__':\n",
    "    print(\"Enter Video link\")\n",
    "    vid_link=str(input())\n",
    "    t1=Thread(target = downloader, args=(vid_link, ))\n",
    "    t2=Thread(target = sniffer)\n",
    "    t1.start()\n",
    "    t2.start()\n",
    "    t2.join()\n",
    "    print(var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Video link\n",
      "dsdf\n",
      "downloader started \n",
      "\n",
      "\n",
      "download complete \n",
      "\n",
      "Ether / IP / TCP 10.159.2.177:58494 > 35.186.194.58:https A / Raw\n",
      "Ether / IP / TCP 35.186.194.58:https > 10.159.2.177:58494 A / Padding\n",
      "Ether / IP / UDP 10.159.2.177:61043 > 172.217.31.206:https / Raw\n",
      "Ether / IP / UDP 172.217.31.206:https > 10.159.2.177:61043 / Raw\n",
      "Ether / IP / TCP 10.159.2.177:58493 > 172.217.163.165:https A / Raw\n",
      "Ether / IP / TCP 172.217.163.165:https > 10.159.2.177:58493 A / Padding\n",
      "Ether / IP / UDP 10.159.2.177:61042 > 172.217.163.195:https / Raw\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "from threading import Thread\n",
    "import time\n",
    "from scapy.all import *\n",
    "\n",
    "check = False\n",
    "var=0\n",
    "\n",
    "def downloader(vid_link):\n",
    "    global check\n",
    "    print (\"downloader started \\n\")\n",
    "    for i in range(5):  #representing download time\n",
    "        time.sleep(1)\n",
    "    check=True\n",
    "    print(\"\\ndownload complete \\n\")\n",
    "    \n",
    "\n",
    "def sniffer():\n",
    "    global check\n",
    "    global var\n",
    "    var=sniff(stop_filter=lambda x: check)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    print(\"Enter Video link\")\n",
    "    vid_link=str(input())\n",
    "    t1=Thread(target = downloader, args=(vid_link, ))\n",
    "    t2=Thread(target = sniffer)\n",
    "    t1.start()\n",
    "    t2.start()\n",
    "    t2.join()\n",
    "    print(var.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Video link\n",
      "d\n",
      "\n",
      "Downloader started\n",
      "Sniffing started \n",
      "\n",
      "\n",
      "Download complete\n",
      "Sniffing Complete \n",
      "\n",
      "Ether / IP / TCP 10.159.2.177:58731 > 2.17.60.151:https A / Raw\n",
      "Ether / IP / TCP 2.17.60.151:https > 10.159.2.177:58731 A / Padding\n",
      "Ether / IP / UDP 10.159.2.177:53460 > 216.58.200.130:https / Raw\n",
      "Ether / IP / UDP 216.58.200.130:https > 10.159.2.177:53460 / Raw\n",
      "Ether / IP / UDP 216.58.200.130:https > 10.159.2.177:53460 / Raw\n",
      "Ether / IP / UDP 216.58.200.130:https > 10.159.2.177:53460 / Raw / Padding\n",
      "Ether / IP / UDP 10.159.2.177:53460 > 216.58.200.130:https / Raw\n",
      "Ether / IP / UDP 10.159.2.177:58623 > 172.217.163.195:https / Raw\n",
      "Ether / IP / UDP 172.217.163.195:https > 10.159.2.177:58623 / Raw\n",
      "Ether / IP / UDP 172.217.163.195:https > 10.159.2.177:58623 / Raw\n",
      "Ether / IP / UDP 172.217.163.195:https > 10.159.2.177:58623 / Raw / Padding\n",
      "Ether / IP / UDP 10.159.2.177:58623 > 172.217.163.195:https / Raw\n",
      "Ether / 10.159.2.177 > 224.0.0.252 2 / Raw\n",
      "Ether / IP / TCP 10.159.2.177:58795 > 2.58.44.26:https A / Raw\n",
      "Ether / IP / TCP 2.58.44.26:https > 10.159.2.177:58795 A / Padding\n",
      "Ether / IP / TCP 10.159.2.177:58738 > 173.241.248.143:https A / Raw\n",
      "Ether / IP / TCP 173.241.248.143:https > 10.159.2.177:58738 A / Padding\n",
      "Ether / IP / TCP 10.159.2.177:58810 > 87.250.251.119:https PA / Raw\n",
      "Ether / IP / TCP 10.159.2.177:58809 > 194.135.94.168:https PA / Raw\n",
      "Ether / IP / TCP 87.250.251.119:https > 10.159.2.177:58810 A / Padding\n",
      "Ether / IP / TCP 194.135.94.168:https > 10.159.2.177:58809 A / Padding\n",
      "Ether / IP / TCP 87.250.251.119:https > 10.159.2.177:58810 PA / Raw\n",
      "Ether / IP / TCP 194.135.94.168:https > 10.159.2.177:58809 PA / Raw\n",
      "Ether / IP / TCP 10.159.2.177:58810 > 87.250.251.119:https A\n",
      "Ether / IP / TCP 10.159.2.177:58809 > 194.135.94.168:https A\n",
      "Ether / 10.159.2.177 > 239.255.255.250 2 / Raw\n",
      "Ether / IP / TCP 194.105.56.171:https > 10.159.2.177:58692 PA / Raw\n",
      "Ether / IP / TCP 194.105.56.171:https > 10.159.2.177:58692 PA / Raw\n",
      "Ether / IP / TCP 10.159.2.177:58692 > 194.105.56.171:https A\n",
      "Ether / IP / TCP 10.159.2.177:58692 > 194.105.56.171:https FA\n",
      "Ether / IP / TCP 194.105.56.171:https > 10.159.2.177:58692 FA / Padding\n",
      "Ether / IP / TCP 10.159.2.177:58692 > 194.105.56.171:https A\n",
      "Ether / IP / TCP 194.105.56.171:https > 10.159.2.177:58692 A / Padding\n",
      "Ether / IP / TCP 10.159.2.177:58809 > 194.135.94.168:https PA / Raw\n",
      "Ether / IP / TCP 194.135.94.168:https > 10.159.2.177:58809 A / Padding\n",
      "Ether / IP / TCP 194.135.94.168:https > 10.159.2.177:58809 PA / Raw\n",
      "Ether / IP / TCP 10.159.2.177:58809 > 194.135.94.168:https A\n",
      "Ether / IP / TCP 10.159.2.177:58809 > 194.135.94.168:https PA / Raw\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "from threading import Thread\n",
    "import time\n",
    "from scapy.all import *\n",
    "\n",
    "check = threading.Event()\n",
    "var=0\n",
    "\n",
    "def downloader(vid_link):\n",
    "    global check\n",
    "    print (\"\\nDownloader started\\n\")\n",
    "    for i in range(5):  #representing download time\n",
    "        time.sleep(1)\n",
    "    print(\"Download complete\")\n",
    "    check.set()\n",
    "    \n",
    "\n",
    "def sniffer(check):\n",
    "    global var\n",
    "    print(\"Sniffing started \\n\")\n",
    "    var=sniff(stop_filter=lambda x: check.is_set())\n",
    "    print(\"Sniffing Complete \\n\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    print(\"Enter Video link\")\n",
    "    vid_link=str(input())\n",
    "    t1=Thread(target = downloader, args=(vid_link, ))\n",
    "    t2=Thread(target = sniffer, args=(check, ))\n",
    "    t1.start()\n",
    "    t2.start()\n",
    "    t2.join()\n",
    "    print(var.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
